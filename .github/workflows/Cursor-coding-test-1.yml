# openwrt编译

name: Cursor-coding-test-1

on:
  workflow_dispatch:
    inputs:
      config:
        description: '选择配置文件'
        required: true
        default: '.config'
        type: choice
        options:
        - '.config'
        - 'test.config'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.5
  CONFIG_FILE: ${{ github.event.inputs.config }}
  DIY_P1_SH: diy-plug-for-openwrt.sh
  DIY_P2_SH: diy-config.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 准备编译环境
      run: |
        docker build -t openwrt-builder .
        docker create --name openwrt-container openwrt-builder
        docker cp . openwrt-container:/openwrt
        
    - name: 编译 OpenWrt
      run: |
        docker start -a openwrt-container
        docker exec openwrt-container /bin/bash -c "
          cd /openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp $CONFIG_FILE .config
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          make -j$(nproc) || make -j1 V=s
        "

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        docker cp openwrt-container:/openwrt/bin .
        cd bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ steps.organize.outputs.FIRMWARE }}

    - name: 清理 Docker 资源
      if: always()
      run: |
        docker rm -f openwrt-container
        docker rmi openwrt-builder

    - name: 删除旧的 Workflows
      if: always()
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 3

    - name: 删除旧的 Releases
      if: always()
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除未关联的 tags
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: tags } = await github.rest.repos.listTags({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          for (const tag of tags) {
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag.name,
              });
            } catch (e) {
              if (e.status === 404) {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${tag.name}`,
                });
                console.log(`Deleted tag: ${tag.name}`);
              }
            }
          }
